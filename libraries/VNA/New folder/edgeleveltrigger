/* Complex number class */

/*
 * Copyright (c) 2018 Daniel Marks

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
   claim that you wrote the original software. If you use this software
   in a product, an acknowledgment in the product documentation would be
   appreciated but is not required.
2. Altered source versions must be plainly marked as such, and must not be
   misrepresented as being the original software.
3. This notice may not be removed or altered from any source distribution.
 */

#include <Arduino.h>

#include "jogwheel.h"

#define JOGWHEEL_INPUT_A PA15
#define JOGWHEEL_INPUT_B PB13
#define JOGWHEEL_INPUT_PUSH PB11

#define JOGWHEEL_BUTTON_A PA15
#define JOGWHEEL_BUTTON_B PB13
#define JOGWHEEL_BUTTON_SELECT PB11

volatile int jogwheel_interrupts;
volatile int jogwheel_total_counts;
volatile int jogwheel_read_counts;
volatile bool jogwheel_read;

#define DEMCR           (*((volatile uint32_t *)0xE000EDFC))
#define DWT_CTRL        (*(volatile uint32_t *)0xe0001000)
#define CYCCNTENA       (1<<0)
#define DWT_CYCCNT      ((volatile uint32_t *)0xE0001004)
#define CPU_CYCLES      *DWT_CYCCNT
#define DEMCR_TRCENA    0x01000000

#define DEBOUNCE_TIME (F_CPU/50u)

JogWheel::JogWheel()
{
}

bool JogWheel::getSelect()
{
  return (digitalRead(JOGWHEEL_INPUT_PUSH) == HIGH);
}

void JogWheel::poll()
{
}

void jogWheelInterrupt(void)
{
  static unsigned int lasttick = 0;
  unsigned int nexttick = CPU_CYCLES;
  int state = digitalRead(JOGWHEEL_INPUT_B);
  if (state == LOW)
  {
    if (((unsigned int)(nexttick - lasttick)) >= DEBOUNCE_TIME)
    {
      if (jogwheel_read)
        jogwheel_read = false;
      int dir = (digitalRead(JOGWHEEL_INPUT_A) == HIGH) ? 1 : -1;
      jogwheel_read_counts += dir;
      jogwheel_total_counts += dir;
      jogwheel_interrupts++;
    }
  }
  lasttick = nexttick;
}

int JogWheel::readCounts()
{ 
  jogwheel_read = true;
  int temp = jogwheel_read_counts;
  jogwheel_read_counts = 0;
  return temp;
}

int JogWheel::totalCounts()
{
  return jogwheel_total_counts;
}

int JogWheel::readInterrupts()
{
  return jogwheel_interrupts;
}

void JogWheel::setup()
{
  gpio_set_mode(GPIOA, 15, GPIO_INPUT_FLOATING);
  gpio_set_mode(GPIOB, 13, GPIO_INPUT_FLOATING);
  gpio_set_mode(GPIOB, 11, GPIO_INPUT_FLOATING);
  attachInterrupt(JOGWHEEL_INPUT_B, jogWheelInterrupt, CHANGE);
  jogwheel_read_counts = 0;
  jogwheel_total_counts = 0;
  jogwheel_interrupts = 0;
  jogwheel_read = false;
}
